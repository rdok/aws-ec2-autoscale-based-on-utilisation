AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  InstanceType: { Type: String, Default: t3.medium }
  ImageId: { Type: AWS::EC2::Image::Id, Default: ami-089950bc622d39ed8 }
  AwsChatbotStackName: { Type: String }
  Name: { Type: String, Default: 'monitor-memory-disk-cpu-utilization' }
Resources:
  CloudwatchAgentRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns: [ "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy" ]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowEC2ServiceToAssumeRole"
            Effect: Allow
            Action: [ "sts:AssumeRole" ]
            Principal: { Service: [ "ec2.amazonaws.com" ] }
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: { Roles: [ !Ref CloudwatchAgentRole ] }
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags: [ { Key: Name, Value: !Ref AWS::StackName } ]
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: { InternetGatewayId: !Ref InternetGateway, VpcId: !Ref VPC }
  InternetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties: { VpcId: !Ref VPC }
  Subnet1a:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: eu-west-1a
      MapPublicIpOnLaunch: true
  Subnet1aRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: { RouteTableId: !Ref RouteTable, SubnetId: !Ref Subnet1a }
  Subnet1b:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: eu-west-1b
      MapPublicIpOnLaunch: true
  Subnet1bRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: { RouteTableId: !Ref RouteTable, SubnetId: !Ref Subnet1b }
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref ImageId
      IamInstanceProfile: !Ref InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo -e -n "secret\nsecret" | sudo passwd ec2-user
          rpm -Uvh https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource AutoScalingGroup --region ${AWS::Region} --configsets default
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource AutoScalingGroup --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: "PT15M"
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 01_setupCfnHup
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
          UpdateEnvironment:
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
        02_config-amazon-cloudwatch-agent:
          files:
            '/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json':
              content: !Sub |
                {
                  "metrics": {
                    "append_dimensions": {
                      "AutoScalingGroupName": "${!aws:AutoScalingGroup}",
                      "ImageId": "${!aws:ImageId}",
                      "InstanceId": "${!aws:InstanceId}",
                      "InstanceType": "${!aws:InstanceType}"
                    },
                    "metrics_collected": {
                      "mem": { "measurement": [ "mem_used_percent" ] },
                      "disk": { "measurement": [ "disk_used_percent" ] }
                    }
                  }
                }
        03_restart_amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            02_start_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
        01_setupCfnHup:
          files:
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region} --configsets UpdateEnvironment
                runas=root
              mode: '000400'
              owner: root
              group: root
            "/lib/systemd/system/cfn-hup.service":
              content: !Sub |
                [Unit]
                Description=cfn-hup daemon
                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always
                [Install]
                WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: !Sub |
                systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: !Sub |
                systemctl start cfn-hup.service
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: 2
      MaxSize: 6
      DesiredCapacity: 2
      VPCZoneIdentifier: [ !Ref Subnet1a, !Ref Subnet1b ]
      Tags: [ { Key: Name, Value: !Ref AWS::StackName, PropagateAtLaunch: true } ]
#  CPUUtilizationAlarm:
#    Type: AWS::CloudWatch::Alarm
#    Properties:
#      AlarmDescription: >
#        Alert when the average CPU utilization exceeds 90 percent for 1 minute
#        over one evaluation period.
#      AlarmActions: [ Fn::ImportValue: !Sub "${AwsChatbotStackName}-ErrorsListenerArn" ]
#      OKActions: [ Fn::ImportValue: !Sub "${AwsChatbotStackName}-ErrorsListenerArn" ]
#      MetricName: CPUUtilization
#      Namespace: AWS/EC2
#      Statistic: Average
#      Period: '60'
#      EvaluationPeriods: '1'
#      Threshold: '80'
#      ComparisonOperator: GreaterThanThreshold
#      Dimensions: [ { Name: InstanceId, Value: !Ref EC2Instance } ]
#  MemoryUtilizationAlarm:
#    Type: AWS::CloudWatch::Alarm
#    Properties:
#      AlarmDescription: >
#        Alert when the memory utilization percentage exceeds a threshold for an amount of time
#        over an amount of period(s).
#      AlarmActions: [ Fn::ImportValue: !Sub "${AwsChatbotStackName}-ErrorsListenerArn" ]
#      OKActions: [ Fn::ImportValue: !Sub "${AwsChatbotStackName}-ErrorsListenerArn" ]
#      Namespace: CWAgent
#      MetricName: mem_used_percent
#      Statistic: Average
#      Period: '60'
#      EvaluationPeriods: '1'
#      Threshold: '80'
#      ComparisonOperator: GreaterThanThreshold
#      Dimensions:
#        - { Name: InstanceId, Value: !Ref EC2Instance }
#        - { Name: ImageId, Value: !Ref ImageId }
#        - { Name: InstanceType, Value: !Ref InstanceType }
#  DiskUtilizationAlarm:
#    Type: AWS::CloudWatch::Alarm
#    Properties:
#      AlarmDescription: >
#        Alert when the disk utilization percentage exceeds a threshold for an amount of time
#        over an amount of period(s).
#      AlarmActions: [ Fn::ImportValue: !Sub "${AwsChatbotStackName}-ErrorsListenerArn" ]
#      OKActions: [ Fn::ImportValue: !Sub "${AwsChatbotStackName}-ErrorsListenerArn" ]
#      Namespace: CWAgent
#      MetricName: disk_used_percent
#      Statistic: Average
#      Period: '60'
#      EvaluationPeriods: '1'
#      Threshold: '80'
#      ComparisonOperator: GreaterThanThreshold
#      Dimensions:
#        - { Name: path, Value: '/' }
#        - { Name: InstanceId, Value: !Ref AutoScalingGroup }
#        - { Name: ImageId, Value: !Ref ImageId }
#        - { Name: InstanceType, Value: !Ref InstanceType }
#        - { Name: device, Value: nvme0n1p1 }
#        - { Name: fstype, Value: xfs }
#  UtilizationDashboard:
#    Type: AWS::CloudWatch::Dashboard
#    Properties:
#      # https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html
#      DashboardBody: !Sub |
#        {
#           "widgets": [
#              {
#                 "type":"metric",
#                 "width":24,
#                 "height":8,
#                 "properties":{
#                    "metrics":[
#                      [ "AWS/EC2", "CPUUtilization", "InstanceId", "${EC2Instance}", {"label": "CPU Utilization"} ],
#                      [
#                        "CWAgent", "mem_used_percent",
#                        "InstanceId", "${EC2Instance}" ,
#                        "ImageId", "${ImageId}",
#                        "InstanceType", "${InstanceType}",
#                        {"label": "Memory Used Percent" }
#                      ],
#                      [
#                        "CWAgent", "disk_used_percent",
#                        "path", "/" ,
#                        "InstanceId", "${EC2Instance}",
#                        "ImageId", "${ImageId}",
#                        "InstanceType", "${InstanceType}",
#                        "device", "nvme0n1p1",
#                        "fstype", "xfs",
#                        {"label": "Disk Used Percent" }
#                      ]
#                    ],
#                    "period":300,
#                    "stat":"Average",
#                    "region":"${AWS::Region}",
#                    "title":"${Name}",
#                    "liveData": false
#                 }
#              }
#           ]
#        }
#
#Outputs:
#  Dashboard:
#    Description: "Can take up to 10 minutes to load data on first run."
#    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${UtilizationDashboard}"
#  DiskUtilizationAlarm:
#    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#alarmsV2:alarm/${DiskUtilizationAlarm}"
#  MemoryUtilizationAlarm:
#    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#alarmsV2:alarm/${MemoryUtilizationAlarm}"
#  CPUUtilizationAlarm:
#    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#alarmsV2:alarm/${CPUUtilizationAlarm}"
